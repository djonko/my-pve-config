---
services:
  postgresql:
    image: docker.io/library/postgres:16-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - /opt/data-docker/authentik/postgresql:/var/lib/postgresql/data
      - "/etc/timezone:/etc/timezone:ro"
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      POSTGRES_PASSWORD: ${ATK_POSTGRES_PASSWORD}
      POSTGRES_USER: ${ATK_POSTGRES_USER}
      POSTGRES_DB: ${ATK_POSTGRES_DB}
  redis:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - /opt/data-docker/authentik/redis:/data
      - "/etc/timezone:/etc/timezone:ro"
      - "/etc/localtime:/etc/localtime:ro"
    labels:
      - "docker-volume-backup.stop-during-backup=true"
      - "com.centurylinklabs.watchtower.scope=toUpdateScope"
  server:
    image: ghcr.io/goauthentik/server:2024.12
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${ATK_POSTGRES_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${ATK_POSTGRES_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${ATK_POSTGRES_PASSWORD}
    volumes:
      - /opt/data-docker/authentik/app/media:/media
      - /opt/data-docker/authentik/app/custom-templates:/templates
      - "/etc/timezone:/etc/timezone:ro"
      - "/etc/localtime:/etc/localtime:ro"
    ports:
      - "9000:9000"
      - "9443:9443"
    labels:
      - "docker-volume-backup.stop-during-backup=true"
      - "com.centurylinklabs.watchtower.scope=toUpdateScope"
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
  worker:
    image: ghcr.io/goauthentik/server:2024.12
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_EMAIL__HOST: ${ATK_SMTP_HOST}
      AUTHENTIK_EMAIL__PORT: ${ATK_SMTP_PORT}
      AUTHENTIK_EMAIL__USERNAME: ${ATK_SMTP_USER}
      AUTHENTIK_EMAIL__PASSWORD: ${ATK_SMTP_PASSWORD}
      AUTHENTIK_EMAIL__USE_TLS: ${ATK_SMTP_USE_TLS} # Use StartTLS
      AUTHENTIK_EMAIL__FROM: ${ATK_SMTP_FROM}
      AUTHENTIK_EMAIL__USE_SSL: false
      AUTHENTIK_EMAIL__TIMEOUT: 10
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${ATK_POSTGRES_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${ATK_POSTGRES_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${ATK_POSTGRES_PASSWORD}
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /opt/data-docker/authentik/app/media:/media
      - /opt/data-docker/authentik/app/certs:/certs
      - /opt/data-docker/authentik/app/custom-templates:/templates
      - "/etc/timezone:/etc/timezone:ro"
      - "/etc/localtime:/etc/localtime:ro"
    labels:
      - "docker-volume-backup.stop-during-backup=true"
      - "com.centurylinklabs.watchtower.scope=toUpdateScope"
    env_file:
      - .env
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
