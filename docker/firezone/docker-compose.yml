# Example compose file for production deployment on Linux.
#
# Note: This file is meant to serve as a template. Please modify it
# according to your needs. Read more about Docker Compose:
#
# https://docs.docker.com/compose/compose-file/
#
#
x-deploy: &default-deploy
  restart_policy:
    condition: unless-stopped
    delay: 5s
    window: 120s
  update_config:
    order: start-first

version: '3.9'

services:
  caddy:
    image: caddy:2
    labels:
      - "docker-volume-backup.stop-during-backup=true"
    security_opt:
      - no-new-privileges:true
    volumes:
      - ${FZ_INSTALL_DIR:-.}/caddy:/data/caddy
      - "/etc/localtime:/etc/localtime:ro"
      - "/etc/timezone:/etc/timezone:ro"
    # See Caddy's documentation for customizing this line
    # https://caddyserver.com/docs/quick-starts/reverse-proxy
    command:
      - /bin/sh
      - -c
      - |
        cat <<EOF > /etc/caddy/Caddyfile && caddy run --config /etc/caddy/Caddyfile

        https:// {
          log
          reverse_proxy * 172.25.0.100:13000
          tls internal {
            on_demand
          }
        }
        EOF
    network_mode: "host"
    deploy:
      <<: *default-deploy

  firezone:
    image: firezone/firezone
    security_opt:
      - no-new-privileges:true
    ports:
      - "44837:51820/udp"
    labels:
      - "docker-volume-backup.stop-during-backup=true"
    env_file:
      # This should contain a list of env vars for configuring Firezone.
      # See https://docs.firezone.dev/reference/env-vars for more info.
      - ${FZ_INSTALL_DIR:-.}/.env
    volumes:
      # IMPORTANT: Persists WireGuard private key and other data. If
      # /var/firezone/private_key exists when Firezone starts, it is
      # used as the WireGuard private. Otherwise, one is generated.
      - ${FZ_INSTALL_DIR:-.}/firezone:/var/firezone
      - "/etc/localtime:/etc/localtime:ro"
      - "/etc/timezone:/etc/timezone:ro"
    cap_add:
      # Needed for WireGuard and firewall support.
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      # Needed for masquerading and NAT.
      - net.ipv6.conf.all.disable_ipv6=0
      - net.ipv4.ip_forward=1
      - net.ipv6.conf.all.forwarding=1
    depends_on:
      - postgres
    environment:
      TZ: "${TIME_ZONE}"
    networks:
      firezone-network:
        ipv4_address: 172.25.0.100
    deploy:
      <<: *default-deploy

  postgres:
    image: postgres:15
    container_name: postgres
    security_opt:
      - no-new-privileges:true
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - /opt/data-docker/firezone/backups:/var/lib/firezone-backups/
      - "/etc/localtime:/etc/localtime:ro"
      - "/etc/timezone:/etc/timezone:ro"
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      TZ: "${TIME_ZONE}"
    networks:
      - firezone-network
    deploy:
      <<: *default-deploy
      update_config:
        order: stop-first
  adminer:
    image: adminer:latest
    container_name: adminer
    depends_on:
      - postgres
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    networks:
      - firezone-network
    restart: unless-stopped
    ports:
      - "8102:8080"
    labels:
      - "docker-volume-backup.stop-during-backup=true"
      - docker-volume-backup.archive-pre=/bin/sh -c 'pg_dump -U db_user db_firezone > /var/lib/firezone-backups/bck_db_firezone$(date +%Y%m%d-%H%M).sql'

# Postgres needs a named volume to prevent perms issues on non-linux platforms
volumes:
  postgres-data:

networks:
  firezone-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16